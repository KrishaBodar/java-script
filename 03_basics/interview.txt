javascript excution context
{} -> global excution context
      function excution context
      eval excution context

{} -> memory creation phase (creation phase)      
      excution phase


let val1 = 10
let val2 = 5
function addnum(num1, num2){
  let total = num1 + num2
  return total
}
let result1 = addnum(val1, val2)
let result2 = addnum(10, 2)


steps for this 
1. global excution
    this (locate at this)
2. memory phase
    val1 -> undefined
    val2 -> undefined    
    addnum -> defination(function's)
    result1 -> undefined
    result2 -> undefined
3.excution phase
    val1 <- 10
    val2 <- 5
    addnum -> |---------------------------|    
              | newVariable environment   |
              |           +               | <-  after the excution ends this box is deleted by self
              |excution thread            |
              |---------------------------|
                            |
              ______________|__________________________
              |                                        |
        memory phase                           excution phase
        val1 -> undefined                      num1 -> 10
        val2 -> undefined                      num2 -> 5
        total -> undefined                     total -> 15
    after perfoming the total total value is return in global excution context

in last excution phase 
    result1 = 15
    result2 = 15

now repeat the step3



call stack

|                   |
|   three()         |
|   two()           |
|   One()           |
|-------------------|
| global excution   |
|-------------------|

in the stack it used LIFO (last in first out )
in this case like three is last in so at the output fist run three and it becomes out of the stack 
